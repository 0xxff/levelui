#!/usr/bin/env node
var argv = require('optimist').argv;

function underline(s) {
  return '\x1B[4m' + s + '\x1B[24m';
} 

if (argv.h || argv.help) {

  console.log([

    '',

    underline('DATA'),

    '--protocol <p>  specify the protocol where `p` is `tls` or `tcp`',
    '--in <n>        specify a port for inbound data where `n` is a number',
    '--out <n>       specify a port for outbound data where `n` is a number',
    '--newline       alternatively receive newline delimited streams.',
    '',

    underline('USER INTERFACE'),

    '--https <n>     a port for the web-server/user-interface to run on',
    '--host <h>      ip or hostname for the web server if not localhost',
    '',

    underline('USER MANAGEMENT'),

    '-u <username>   specify a username to create or check for',
    '-p <password>   specify a password for the given username',
    '',

    underline('MISC'),

    '-c              regenerate private key and certificate for server',
    ''

  ].join('\n'));

  process.exit(0);
}
else if (argv.u) {

  var location = require('path').join(__dirname, '..', 'lib', 'sysdb');

  var opts = {
    encoding: 'json',
    keyEncoding: 'json',
    valueEncoding: 'json'
  };

  require('levelup')(location, opts, function(err, db) {

    if (argv.p) {
      require('bcrypt').hash(String(argv.p), 5, function(err, bcryptedPassword) {
         db.put('__user__' + argv.u, bcryptedPassword, function(err) {

          if (err) {
            console.log(err);
            process.exit(1);
          }
          else {
            console.log('Added %s to the database', argv.u);
          }

         });
      });
    }
    else {
      db.get('__user__' + argv.u, function(err, value) {
        if (err && err.name === 'NotFoundError') {
          console.log('No user named %s', argv.u);
        }
        else {
          console.log('The user %s exists, use `-p` to set password.', argv.u);
        }
        
      });
    }
  });
}
else if (argv.c) {

  require('../lib/certs').selfSign(function(err) {
    console.log(err || 'OK');
  });
}
else {

  require('../lib')({
    https: argv.https,
    protocol: argv.protocol,
    'in': argv['in'],
    'out': argv['out'],
    host: argv.host,
    location: argv._[0],
    encoding: argv.encoding,
    keyEncoding:argv.keyEncoding
  });  
}
